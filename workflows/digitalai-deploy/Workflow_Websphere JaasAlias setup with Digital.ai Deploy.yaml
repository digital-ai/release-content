---
apiVersion: xl-release/v1
kind: Templates
metadata:
  home: Digital.ai - Official/Workflows/Digital.ai Deploy
spec:
- template: Websphere JaasAlias setup with Digital.ai Deploy
  description: "Easily create an application in Digital.ai Deploy that can be used\
    \ to create a JaasAlias in a remote Websphere Server, including its respective\
    \ environment and infrastructure setup."
  scheduledStartDate: 2023-02-14T03:30:00Z
  dueDate: 2023-02-14T04:30:00Z
  phases:
  - phase: Setup Infra and Env
    tasks:
    - name: Specify Run As User
      type: xlrelease.UserInputTask
      description: Specify the Run as user credentials which will be used to run the
        workflow. All automated tasks will be run as this user.
      variables:
      - run-as-user
      - run-as-password
    - name: Specify Deploy Server Details
      type: xlrelease.UserInputTask
      description: Select the Digital.ai Deploy Server Connection onto which the Websphere
        application has to be created. You can create a new connection if you have
        not created one.
      owner: admin
      variables:
      - deploy-server
    - name: Specify Environment Name
      type: xlrelease.UserInputTask
      description: Specify a name for the environment CI that should be created for
        AWS in Digital.ai Deploy server.
      owner: admin
      variables:
      - environment-name
    - name: Create Environment
      type: deploy.CreateCI
      description: Creates an Environment CI in Digital.ai Deploy Server.
      owner: admin
      variableMapping:
        server: "${deploy-server}"
      capabilities:
      - remote
      ciID: "Environments/${environment-name}"
      ciType: udm.Environment
      jsonDescriptor: "{}"
    - name: Specify WAS Host Parameters
      type: xlrelease.UserInputTask
      description: Specify the SSH connection details to connect to the Webshere hosting
        machine.
      owner: admin
      variables:
      - host-identifier
      - sudo-username
      - os
      - connection-type
      - address
      - ssh-username
      - ssh-password
    - name: Configure Remote Host
      type: deploy.CreateCI
      description: Creates an Overthere SSH host CI in Digital.ai Deploy Server using
        the details specified in the previous step.
      owner: admin
      variableMapping:
        server: "${deploy-server}"
      capabilities:
      - remote
      ciID: "Infrastructure/${host-identifier}"
      ciType: overthere.SshHost
      jsonDescriptor: |-
        {
            "stagingDirectoryPath":"",
            "sudoUsername":"${sudo-username}",
            "suUsername":"",
            "suPassword":"",
            "os":"${os}",
            "connectionType":"${connection-type}",
            "address":"${address}",
            "port":22,
            "username":"${ssh-username}",
            "privateKeyFile":"",
            "passphrase":""
        }
    - name: Set WAS Host Credentials
      type: deploy.UpdateCIPropertyWithSecretValue
      description: Sets the SSH password in the previously created Host CI in Digital.ai
        Deploy server.
      variableMapping:
        server: "${deploy-server}"
        propertyValue: "${ssh-password}"
      capabilities:
      - remote
      ciID: "Infrastructure/${host-identifier}"
      ciProperty: password
      propertyValue: !value "deploy_UpdateCIPropertyWithSecretValue_Set_WAS_Host_Credentials_propertyValue"
    - name: Check Remote Host Connection
      type: deploy.ControlTask
      description: Runs a Check Connection control task on the created SSH host CI
        in the Digital.ai Deploy server to validate the specified credentials.
      owner: admin
      variableMapping:
        server: "${deploy-server}"
      capabilities:
      - remote
      ciId: "Infrastructure/${host-identifier}"
      taskName: checkConnection
      numberOfContinueRetrials: 0
      pollingInterval: 10
      numberOfPollingTrials: 0
      displayStepLogs: true
      connectionRetries: 10
    - name: Specify WAS Deployment Manager Parameters
      type: xlrelease.UserInputTask
      description: Specify the connection details for Webshere.
      owner: admin
      variables:
      - cell-name
      - was-home
      - was-username
      - was-password
    - name: Configure Websphere Deployment Manager
      type: deploy.CreateCI
      description: Creates a Websphere Deployment Manager CI in the Digital.ai Deploy
        server using the details specified in the previous tasks.
      owner: admin
      variableMapping:
        server: "${deploy-server}"
      capabilities:
      - remote
      ciID: "Infrastructure/${host-identifier}/${cell-name}"
      ciType: was.DeploymentManager
      jsonDescriptor: |-
        {
            "wasHome": "${was-home}",
            "username": "${was-username}",
            "version": "WAS_90"
        }
      addToEnvironment: true
      envID: "Environments/${environment-name}"
    - name: Set Websphere Credentials
      type: deploy.UpdateCIPropertyWithSecretValue
      description: Sets the Websphere password in the previously created Deployment
        Manager CI.
      variableMapping:
        propertyValue: "${was-password}"
        server: "${deploy-server}"
      capabilities:
      - remote
      ciID: "Infrastructure/${host-identifier}/${cell-name}"
      ciProperty: password
    - name: Specify WAS Node Agent Parameters
      type: xlrelease.UserInputTask
      description: Specify the name of the Websphere Node Agent CI to be created in
        Digital.ai Deploy Server.
      owner: admin
      variables:
      - node-name
    - name: Configure Websphere Node Agent
      type: deploy.CreateCI
      description: Creates a Websphere Node Agent CI in the Digital.ai Deploy server.
      variableMapping:
        server: "${deploy-server}"
      capabilities:
      - remote
      ciID: "Infrastructure/${host-identifier}/${cell-name}/${node-name}"
      ciType: was.NodeAgent
      jsonDescriptor: "{}"
      addToEnvironment: true
      envID: "Environments/${environment-name}"
    - name: Specify WAS Server Parameters
      type: xlrelease.UserInputTask
      description: Specify the name of the Websphere Server CI to be created in the
        Digital.ai Deploy server.
      owner: admin
      variables:
      - server-name
    - name: Configure Websphere Server
      type: deploy.CreateCI
      description: Creates a Websphere Server CI in the Digital.ai Deploy server.
      variableMapping:
        server: "${deploy-server}"
      capabilities:
      - remote
      ciID: "Infrastructure/${host-identifier}/${cell-name}/${node-name}/${server-name}"
      ciType: was.ManagedServer
      jsonDescriptor: "{}"
      addToEnvironment: true
      envID: "Environments/${environment-name}"
    color: '#3d6c9e'
  - phase: Setup Application
    tasks:
    - name: Specify WAS Application Name
      type: xlrelease.UserInputTask
      description: Specify the name of the application to be created in the Digital.ai
        Deploy server.
      owner: admin
      variables:
      - application-name
    - name: Create Application
      type: deploy.CreateCI
      description: Creates an application with the specified name in the Digital.ai
        Deploy server.
      owner: admin
      variableMapping:
        server: "${deploy-server}"
      capabilities:
      - remote
      ciID: "Applications/${application-name}"
      ciType: udm.Application
      jsonDescriptor: "{}"
    - name: Specify Deployment Package
      type: xlrelease.UserInputTask
      description: Specify a package name to be created within the application created
        in Digital.ai Deploy server in the previous step.
      owner: admin
      variables:
      - package-name
    - name: Create Deployment Package
      type: deploy.CreateCI
      description: Creates a deployment package with the specfied name in the application
        created in Digital.ai Deploy server.
      owner: admin
      variableMapping:
        server: "${deploy-server}"
      capabilities:
      - remote
      ciID: "Applications/${application-name}/${package-name}"
      ciType: udm.DeploymentPackage
      jsonDescriptor: "{}"
    - name: Specify WAS JaasAliasSpec Parameters
      type: xlrelease.UserInputTask
      description: Specify the JASS Alias name and password. this will be used to
        create the application package in the Digital.ai Deploy server.
      owner: admin
      variables:
      - jaas-username
      - jaas-password
    - name: Create Sample WAS JaasAliasSpec
      type: deploy.CreateCI
      description: Creates the JASS AliasSpec CI in the application package in Digital.ai
        Deploy server.
      owner: admin
      variableMapping:
        server: "${deploy-server}"
      capabilities:
      - remote
      ciID: "Applications/${application-name}/${package-name}/${jaas-alias-name}"
      ciType: was.JaasAliasSpec
      jsonDescriptor: |-
        {
        "username": "${jaas-username}"
        }
    - name: Set JaasAlias Password
      type: deploy.UpdateCIPropertyWithSecretValue
      description: Sets the sensitive password information in the created JAAS AliasSpec
        CI created in the previous step.
      variableMapping:
        propertyValue: "${jaas-password}"
        server: "${deploy-server}"
      capabilities:
      - remote
      ciID: "Infrastructure/${host-identifier}"
      ciProperty: password
      propertyValue: !value "deploy_UpdateCIPropertyWithSecretValue_Set_JaasAlias_Password_propertyValue"
    - name: Add Managed Application
      type: xlrelease.ScriptTask
      description: Adds the created Websphere application to the Digital.ai Release
        managed application list.
      owner: admin
      script: |-
        from com.xebialabs.xlrelease.api.v1.views import ManagedApplicationView
        from com.xebialabs.xlrelease.api.v1.views import ConnectionServerView
        from java.util import Date
        from java.text import SimpleDateFormat
        import datetime

        parsedDate = datetime.datetime.now()

        requestBody = ManagedApplicationView()
        requestBody.applicationName = "${application-name}"
        requestBody.managedBy = "Digital.ai Deploy"
        requestBody.dateCreated = parsedDate
        requestBody.environmentTag = "${environment-name}"
        requestBody.applicationReference = "${application-name}"

        connectionServer = ConnectionServerView('${deploy-server}', '', '', '')
        requestBody.connectionServer = connectionServer

        res = managedApplicationApi.addManagedApplication(requestBody)
    color: '#3d6c9e'
  kind: WORKFLOW
  categories:
  - Application onboarding
  variables:
  - type: xlrelease.StringVariable
    key: environment-name
    value: was-env
  - type: xlrelease.StringVariable
    key: host-identifier
    value: was-host
  - type: xlrelease.StringVariable
    key: os
    value: UNIX
  - type: xlrelease.StringVariable
    key: address
    value: 1.2.3.4
  - type: xlrelease.StringVariable
    key: connection-type
    value: SUDO
  - type: xlrelease.StringVariable
    key: ssh-username
    value: ssh-username
  - type: xlrelease.PasswordStringVariable
    key: ssh-password
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: sudo-username
    value: sudo-username
  - type: xlrelease.StringVariable
    key: application-name
    value: was-application
  - type: xlrelease.StringVariable
    key: package-name
    value: "1.0"
  - type: xlrelease.StringVariable
    key: cell-name
    value: was-cell-1
  - type: xlrelease.StringVariable
    key: was-home
    value: /opt/IBM/WebSphere/AppServer-1/profiles/Dmgr01
  - type: xlrelease.StringVariable
    key: was-username
    value: admin
  - type: xlrelease.PasswordStringVariable
    key: was-password
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: was-version
    value: WAS_90
  - type: xlrelease.StringVariable
    key: node-name
    value: was-node-1
  - type: xlrelease.StringVariable
    key: server-name
    value: was-server-1
  - type: xlrelease.StringVariable
    key: jaas-username
    value: admin
  - type: xlrelease.PasswordStringVariable
    key: jaas-password
    showOnReleaseStart: false
  - type: xlrelease.ReferenceVariable
    key: deploy-server
    showOnReleaseStart: false
    label: Deploy Server
    referencedType: digitalai.DeployServer
  - type: xlrelease.StringVariable
    key: jaas-alias-name
    value: Sample JAAS Alias
  - type: xlrelease.StringVariable
    key: run-as-user
    showOnReleaseStart: false
    label: Run as user
  - type: xlrelease.PasswordStringVariable
    key: run-as-password
    showOnReleaseStart: false
    label: Run as password
  scriptUsername: "${run-as-user}"
  variableMapping:
    scriptUserPassword: "${run-as-password}"
  author: Digital.ai
  logo:
    type: xlrelease.TemplateLogo
    contentType: image/svg+xml
    file: !file "template-logo/xlr-xld-plugin.svg"
  defaultTargetFolder: Digital.ai - Official/Workflow Executions
